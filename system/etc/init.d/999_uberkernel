#!/system/bin/sh

##UBER.CFG v1.1.1
##MERGED WITH @janres155 SCRIPTS

UBER_LOGFILE="/data/local/tmp/uber.log"
. /system/etc/uber_v1.1.cfg
. /system/etc/advanced_v1.1.cfg

if [ -f $UBER_LOGFILE ]; then
  mv $UBER_LOGFILE $UBER_LOGFILE.2;
fi
echo $(date) >> $UBER_LOGFILE

if [ $ENABLED -eq 1 ]; then
#======================================================================================	
	# PREPARATION
	echo "Waiting for system to start" >> $UBER_LOGFILE
	 
	# - Wait until we see some android processes to consider boot is more or less complete (credits to AndiP71)
	while ! pgrep com.android ; do
		sleep 1
	done
	 
	echo "System is starting up, let's wait another 10 seconds" >> $UBER_LOGFILE
	 
	# - Let's wait another for grace timer
	sleep $GRACE_TIME
	 
	echo "Starting kernel configuration" >> $UBER_LOGFILE

#==GENERAL=============================================================================

	# FRANDOM
	if [ $FRANDOM -eq 1 ]; then
		chmod 644 /dev/frandom
		chmod 644 /dev/erandom
		mv /dev/random /dev/random.ori
		mv /dev/urandom /dev/urandom.ori
		ln /dev/frandom /dev/random
		chmod 644 /dev/random
		ln /dev/erandom /dev/urandom
		chmod 644 /dev/urandom
		echo Frandom\: Enabled >> $UBER_LOGFILE;
		sleep $WAIT_TIMERS
		sync
	else         
		echo Frandom\: Disabled >> $UBER_LOGFILE;
	fi

	##FILE SYSTEM TRIM
	if [ $FSTRIM -eq 1 ]; then
		fstrim -v /cache| tee -a $UBER_LOGFILE;
		fstrim -v /data| tee -a $UBER_LOGFILE;
		echo Fstrim\: Enabled >> $UBER_LOGFILE;
	else
		echo Fstrim\: Disabled >> $UBER_LOGFILE;
	fi

	##COLOR PRESET
	if [ $COLORS -eq 1 ]; then
		#  Red Positive                = /sys/module/dsi_panel/kgamma_rp
		echo "0 12 19 30 39 48 56 72 83 105 118 126 121 114 109 102 93 73 63 54 40 33 20" > /sys/module/dsi_panel/kgamma_rp
		#  Red Negative                = /sys/module/dsi_panel/kgamma_rn
		echo "0 12 19 30 39 48 56 72 83 105 118 130 121 115 114 102 82 76 63 54 40 33 20" > /sys/module/dsi_panel/kgamma_rn
		#  Green Positive              = /sys/module/dsi_panel/kgamma_gp
		echo "0 12 19 30 39 54 61 78 84 107 123 132 117 110 108 97 90 71 61 52 45 37 21" > /sys/module/dsi_panel/kgamma_gp
		#  Green Negative              = /sys/module/dsi_panel/kgamma_gn
		echo "0 12 19 30 39 54 61 78 84 107 121 130 119 112 107 99 76 72 57 50 45 37 21" > /sys/module/dsi_panel/kgamma_gn
		#  Blue Positive               = /sys/module/dsi_panel/kgamma_bp
		echo "0 12 19 30 39 48 56 72 83 105 121 126 119 112 107 99 91 71 63 53 44 36 22" > /sys/module/dsi_panel/kgamma_bp
		#  Blue Negative               = /sys/module/dsi_panel/kgamma_bn
		echo "0 12 19 30 39 48 56 72 83 105 121 134 119 113 110 98 78 72 59 50 44 36 22" > /sys/module/dsi_panel/kgamma_bn
		#  White Point                 = /sys/module/dsi_panel/kgamma_w
		echo "28" > /sys/module/dsi_panel/kgamma_w

		sleep $WAIT_TIMERS
		sync
		echo Colors\: Cl3Keners Fav >> $UBER_LOGFILE;
	else
		echo Colors\: Stock >> $UBER_LOGFILE;
	fi

	##EXFAT
	if [ $EXFAT -eq 1 ]; then
		insmod /system/lib/modules/exfat.ko
	  	echo ExFAT Module\: Loaded >> $UBER_LOGFILE;
		 
		sleep $WAIT_TIMERS
		sync
	else
		rmmod /system/lib/modules/exfat.ko
	  	echo ExFAT Module\: Unloaded >> $UBER_LOGFILE;
	fi

	##Battery Life Extender
	echo $BLX > /sys/class/misc/batterylifeextender/charging_limit
	echo Battery Life Extender\: $BLX >> $UBER_LOGFILE;

	##FASTCHARGE
	if [ $FASTCHARGE -eq 1 ]; then
		echo 1 > /sys/kernel/fast_charge/force_fast_charge
		echo $FC_LEVEL > /sys/kernel/fast_charge/fast_charge_level 
		sleep $WAIT_TIMERS
		sync
		echo USB Fastcharge\: enabled >> $UBER_LOGFILE;
	else
		echo 0 > /sys/kernel/fast_charge/force_fast_charge
		echo USB Fastcharge\: disabled >> $UBER_LOGFILE;
	fi

	##FSYNC
	echo $DYNAMIC_FSYNC > /sys/kernel/dyn_fsync/Dyn_fsync_active
	if [ $DYNAMIC_FSYNC -eq 1 ]; then
		echo Dynamic FSync\: Enabled >> $UBER_LOGFILE;
	else
		echo Dynamic FSync\: Disabled >> $UBER_LOGFILE;
	fi

	sleep $WAIT_TIMERS
	sync

	##KSM
	echo $KSM > /sys/kernel/mm/ksm/run
	if [ $KSM -eq 1 ]; then
		echo KSM\: Enabled >> $UBER_LOGFILE;
	else
		echo KSM\: Disabled >> $UBER_LOGFILE;
	fi
	
	sleep $WAIT_TIMERS
	sync

	##VIBRATOR SETTINGS
	echo $VIB > /sys/class/timed_output/vibrator/amp
	echo Vibration Strength\: $VIB >> $UBER_LOGFILE;

	sleep $WAIT_TIMERS
	sync

#==SOUND===============================================================================
	
	#===FRANCO==========================
	if [ "$SOUND" == "franco" ]; then
		echo $CALL >> /sys/devices/virtual/misc/soundcontrol/headset_boost
		echo $MIC >> /sys/devices/virtual/misc/soundcontrol/mic_boost
		echo $SPEAKER >> /sys/devices/virtual/misc/soundcontrol/speaker_boost
		echo $VOLUME >> /sys/devices/virtual/misc/soundcontrol/volume_boost\
		 
		sleep $WAIT_TIMERS
		sync
		echo Sound\: Franco >> $UBER_LOGFILE;

	#===FAUX==============================
	elif [ "$SOUND" == "faux" ]; then
		echo "$FAUX_CAM" > /sys/kernel/sound_control_3/gpl_cam_mic_gain
		echo "$FAUX_HEAD $FAUX_HEAD" > /sys/kernel/sound_control_3/gpl_headphone_gain
		echo "$FAUX_POW $FAUX_POW" > /sys/kernel/sound_control_3/gpl_headphone_pa_gain
		echo "$FAUX_MIC" > /sys/kernel/sound_control_3/gpl_mic_gain
		echo "$FAUX_LOCK" > /sys/kernel/sound_control_3/gpl_sound_control_locked
		echo "$FAUX_SPEAKER $FAUX_SPEAKER" > /sys/kernel/sound_control_3/gpl_speaker_gain
		 
		sleep $WAIT_TIMERS
		sync
		echo Sound\: Faux >> $UBER_LOGFILE;
		
	else
		echo Sound\: Stock >> $UBER_LOGFILE;
	fi

#==BACKLIGHT===========================================================================
	if [ $BDM -eq 1 ]; then
		echo 1 > /sys/module/lm3630_bl/parameters/backlight_dimmer
		echo Backlight Dimmer\: Enabled >> $UBER_LOGFILE;
		echo $BDM_MIN > /sys/module/lm3630_bl/parameters/min_brightness
		echo Minimum Brightness\: $BDM_MIN >> $UBER_LOGFILE;
		 
		sleep $WAIT_TIMERS
		sync
	else
		echo 0 > /sys/module/lm3630_bl/parameters/backlight_dimmer
		echo Backlight Dimmer\: Disabled >> $UBER_LOGFILE;
	fi

#==IO==================================================================================
	##IO SCHEDULER
	echo $IO_SCHEDULER > /sys/block/mmcblk0/queue/scheduler
	echo IO SCHEDULER\: $IO_SCHEDULER >> $UBER_LOGFILE;

	sleep $WAIT_TIMERS
	sync

	##IO READAHEAD
	echo $IO_READAHEAD >> /sys/block/mmcblk0/queue/read_ahead_kb
	echo IO Read ahead size\: $IO_READAHEAD >> $UBER_LOGFILE;

	sleep $WAIT_TIMERS
	sync
	
	##SDCARD READAHEAD
	echo $SD_READAHEAD >> /sys/devices/virtual/bdi/179:0/read_ahead_kb
	echo SDCARD Read ahead size\: $SD_READAHEAD>> $UBER_LOGFILE;

	sleep $WAIT_TIMERS
	sync

#==CPU=================================================================================
	##CPU SETTINGS
	if [ $CPU -eq 1 ]; then

		##GOVERNOR
		if [ "$CPU_GOV" != "0" ]; then
			echo "1" > /sys/devices/system/cpu/cpu0/online
			echo $CPU_GOV > /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor
			echo CPU0 Governor\: $CPU_GOV >> $UBER_LOGFILE;
			echo "1" > /sys/devices/system/cpu/cpu1/online
			echo $CPU_GOV > /sys/devices/system/cpu/cpu1/cpufreq/scaling_governor
			echo CPU1 Governor\: $CPU_GOV >> $UBER_LOGFILE;
			echo "1" > /sys/devices/system/cpu/cpu2/online
			echo $CPU_GOV > /sys/devices/system/cpu/cpu2/cpufreq/scaling_governor
			echo CPU2 Governor\: $CPU_GOV >> $UBER_LOGFILE;
			echo "1" > /sys/devices/system/cpu/cpu3/online
			echo $CPU_GOV > /sys/devices/system/cpu/cpu3/cpufreq/scaling_governor
			echo CPU3 Governor\: $CPU_GOV >> $UBER_LOGFILE;

			sleep $WAIT_TIMERS
			sync
			if [ $GOV_CONT -eq 1 ]; then
				echo $GOV_DEBUG > /sys/devices/system/cpu/cpufreq/$CPU_GOV/debug_mask
				echo $GOV_UP > /sys/devices/system/cpu/cpufreq/$CPU_GOV/up_threshold
				echo $GOV_UP_ANY > /sys/devices/system/cpu/cpufreq/$CPU_GOV/up_threshold_any_cpu_load
				echo $GOV_UP_CORE > /sys/devices/system/cpu/cpufreq/$CPU_GOV/up_threshold_multi_core
				echo $GOV_DOWN > /sys/devices/system/cpu/cpufreq/$CPU_GOV/down_differential
				echo $GOV_DOWN_CORE > /sys/devices/system/cpu/cpufreq/$CPU_GOV/down_differential_multi_core
				echo $GOV_SAMP_RATE > /sys/devices/system/cpu/cpufreq/$CPU_GOV/sampling_rate	
				echo $GOV_SAMP_DOWN > /sys/devices/system/cpu/cpufreq/$CPU_GOV/sampling_down_factor	
				echo $GOV_HIGH_STEP > /sys/devices/system/cpu/cpufreq/$CPU_GOV/high_grid_step
				echo $GOV_HIGH_LOAD > /sys/devices/system/cpu/cpufreq/$CPU_GOV/high_grid_load
				echo $GOV_MID_STEP > /sys/devices/system/cpu/cpufreq/$CPU_GOV/middle_grid_step
				echo $GOV_MID_LOAD > /sys/devices/system/cpu/cpufreq/$CPU_GOV/middle_grid_load
				echo $GOV_POWER_SAVE > /sys/devices/system/cpu/cpufreq/$CPU_GOV/powersave_bias
				echo $GOV_IGNORE_NICE > /sys/devices/system/cpu/cpufreq/$CPU_GOV/ignore_nice_load
				echo $GOV_INPUT_BOOST > /sys/devices/system/cpu/cpufreq/$CPU_GOV/input_boost
				echo $GOV_BUSY_IO > /sys/devices/system/cpu/cpufreq/$CPU_GOV/io_is_busy


				sleep $WAIT_TIMERS
				sync
			fi
		else
			echo CPU Governors\: Stock >> $UBER_LOGFILE;
		fi

		##CPU FREQS
		if [ $CPU_FREQ -eq 1 ]; then
			echo $OPT_FREQ > /sys/devices/system/cpu/cpufreq/$CPU_GOV/optimal_freq
			echo $OPT_MAX_FREQ > /sys/devices/system/cpu/cpufreq/$CPU_GOV/optimal_max_freq
			echo $SYNC_FREQ > /sys/devices/system/cpu/cpufreq/$CPU_GOV/sync_freq

			sleep $WAIT_TIMERS
			sync

			echo $CPU_MAX > /sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq
			echo Max Frequency CPU0\: $CPU_MAX Hz >> $UBER_LOGFILE;
			echo $CPU_MAX > /sys/devices/system/cpu/cpu1/cpufreq/scaling_max_freq
			echo Max Frequency CPU1 $CPU_MAX Hz >> $UBER_LOGFILE;
			echo $CPU_MAX > /sys/devices/system/cpu/cpu2/cpufreq/scaling_max_freq
			echo Max Frequency CPU2\: $CPU_MAX MHz >> $UBER_LOGFILE;
			echo $CPU_MAX > /sys/devices/system/cpu/cpu3/cpufreq/scaling_max_freq
			echo Max Frequency CPU3\: $CPU_MAX Hz >> $UBER_LOGFILE;

			echo $CPU_0_MIN > /sys/devices/system/cpu/cpu0/cpufreq/scaling_min_freq
			echo Min Frequency CPU0\: $CPU_0_MIN Hz >> $UBER_LOGFILE;
			echo $CPU_MIN > /sys/devices/system/cpu/cpu1/cpufreq/scaling_min_freq
			echo Min Frequency CPU1\: $CPU_MIN Hz >> $UBER_LOGFILE;
			echo $CPU_MIN > /sys/devices/system/cpu/cpu2/cpufreq/scaling_min_freq
			echo Min Frequency CPU2\: $CPU_MIN Hz >> $UBER_LOGFILE;
			echo $CPU_MIN > /sys/devices/system/cpu/cpu3/cpufreq/scaling_min_freq
			echo Min Frequency CPU3\: $CPU_MIN Hz >> $UBER_LOGFILE;

			sleep $WAIT_TIMERS
			sync
		else
			echo CPU Frequencies\: Stock >> $UBER_LOGFILE;
		fi

		##UNDERVOLTING		
		if [ "$UV" != "0" ]; then
			let UV1=775+$UV
			let UV2=795+$UV
			let UV3=805+$UV
			let UV4=825+$UV
			let UV5=835+$UV
			let UV6=845+$UV
			let UV7=865+$UV
			let UV8=875+$UV
			let UV9=910+$UV
			let UV10=925+$UV
			let UV11=955+$UV
			let UV12=995+$UV
			let UV13=1050+$UV
			let UV14=1065+$UV
			let UV15=1080+$UV
			let UV16=1100+$UV
			let UV17=1135+$UV
			let UV18=1150+$UV
			let UV19=1175+$UV

			echo "1" > /sys/devices/system/cpu/cpu0/online
			echo "$UV1 $UV1 $UV1 $UV1 $UV1 $UV2 $UV3 $UV4 $UV5 $UV6 $UV7 $UV8 $UV9 $UV10 $UV11 $UV12 $UV13 $UV14 $UV15 $UV16 $UV17 $UV18 $UV19" > /sys/devices/system/cpu/cpu0/cpufreq/UV_mV_table

			echo "1" > /sys/devices/system/cpu/cpu1/online
			echo "$UV1 $UV1 $UV1 $UV1 $UV1 $UV2 $UV3 $UV4 $UV5 $UV6 $UV7 $UV8 $UV9 $UV10 $UV11 $UV12 $UV13 $UV14 $UV15 $UV16 $UV17 $UV18 $UV19" > /sys/devices/system/cpu/cpu1/cpufreq/UV_mV_table

			echo "1" > /sys/devices/system/cpu/cpu2/online
			echo "$UV1 $UV1 $UV1 $UV1 $UV1 $UV2 $UV3 $UV4 $UV5 $UV6 $UV7 $UV8 $UV9 $UV10 $UV11 $UV12 $UV13 $UV14 $UV15 $UV16 $UV17 $UV18 $UV19" > /sys/devices/system/cpu/cpu2/cpufreq/UV_mV_table

			echo "1" > /sys/devices/system/cpu/cpu3/online
			echo "$UV1 $UV1 $UV1 $UV1 $UV1 $UV2 $UV3 $UV4 $UV5 $UV6 $UV7 $UV8 $UV9 $UV10 $UV11 $UV12 $UV13 $UV14 $UV15 $UV16 $UV17 $UV18 $UV19" > /sys/devices/system/cpu/cpu3/cpufreq/UV_mV_table


			sleep $WAIT_TIMERS
			sync
			echo Under\/Over Voltz\: $UV >> $UBER_LOGFILE;
		else
			echo Voltz\: Stock >> $UBER_LOGFILE;
		fi
		
	else
		echo CPU Values\: Stock >> $UBER_LOGFILE;

	fi

#==GPU=================================================================================
	if [ $GPU -eq 1 ]; then
		##GPU GOVERNOR SETTINGS
		if [ $GPU_PERFORMANCE -eq 1 ]; then
			echo performance >> /sys/class/kgsl/kgsl-3d0/pwrscale/trustzone/governor
			echo GPU Governor\: Performance >> $UBER_LOGFILE;
		else
			echo ondemand >> /sys/class/kgsl/kgsl-3d0/pwrscale/trustzone/governor
			echo GPU Governor\: Ondemand >> $UBER_LOGFILE;
		fi

		sleep $WAIT_TIMERS
		sync

		##GPU FREQUENCY
		echo $GPU_MAX >  /sys/devices/fdb00000.qcom,kgsl-3d0/kgsl/kgsl-3d0/max_gpuclk
		echo GPU MAX Frequency\: $GPU_MAX hz >> $UBER_LOGFILE;
		echo $GPU_MIN > /sys/devices/fdb00000.qcom,kgsl-3d0/kgsl/kgsl-3d0/min_pwrlevel
		echo GPU MIN Frequency\: $GPU_MIN hz >> $UBER_LOGFILE;
		sleep $WAIT_TIMERS
		sync

		##GPU THRESHHOLDS
		echo $GPU_DOWN > /sys/module/msm_kgsl_core/parameters/down_threshold
		echo GPU DOWN THRESHOLD\: $GPU_DOWN >> $UBER_LOGFILE;
		echo $GPU_UP > /sys/module/msm_kgsl_core/parameters/up_threshold
		echo GPU UP THRESHOLD\: $GPU_UP >> $UBER_LOGFILE;

		sleep $WAIT_TIMERS
		sync
	else
		echo GPU Presets\: Disabled >> $UBER_LOGFILE;
	fi
	
#==WAKE================================================================================
	if [ $WAKE_CONTROLS -eq 1 ]; then
		##DOUBLETAP2WAKE
		echo $DT2W > /sys/android_touch/doubletap2wake
		echo DT2W\: $DT2W >> $UBER_LOGFILE;

		##SWEEP2WAKE/SLEEP
		echo $S2W > /sys/android_touch/sweep2wake
		echo $S2S > /sys/android_touch/s2w_s2sonly

		echo S2W\: $S2W >> $UBER_LOGFILE;
		echo S2S\: $S2S >> $UBER_LOGFILE;

		##S2W/DT2W POWER KEY TOGGLE
		echo $PWRKEY > /sys/module/qpnp_power_on/parameters/pwrkey_suspend
		echo Powerkey\: $PWRKEY >> $UBER_LOGFILE;

		##S2W/DT2W TIMEOUT
		echo $TIMEOUT > /sys/android_touch/wake_timeout
		echo S2W/DT2W Timeout\: $TIMEOUT >> $UBER_LOGFILE;

		sleep $WAIT_TIMERS
		sync
	else 
		echo Wake Controls\: Disabled >> $UBER_LOGFILE;
	fi

#==HOTPLUGING==========================================================================

	##MPDECISION ON/OFF
	if [ $MPDEC_STATE -eq 1 ]; then
		echo "1" > /sys/kernel/msm_mpdecision/conf/enabled
		echo MPDecision\: Enabled >> $UBER_LOGFILE;
	else
		echo "0" > /sys/kernel/msm_mpdecision/conf/enabled
		echo MPDecision\: Disabled >> $UBER_LOGFILE;
	fi

	##MULTICORE POWERSAVING
	echo $SCHED_MC_POWERSAVINGS > /sys/devices/system/cpu/sched_mc_power_savings

	if [ $SCHED_MC_POWERSAVINGS -eq 0 ]; then
	echo Multicore Power Saving\: Enabled >> $UBER_LOGFILE;
	elif [ $SCHED_MC_POWERSAVINGS -eq 1 ]; then
		echo Multicore Power Saving\: Enabled >> $UBER_LOGFILE;
	elif [ $SCHED_MC_POWERSAVINGS -eq 2 ]; then
		echo Multicore Power Saving\: AGGRESSIVE >> $UBER_LOGFILE;
	fi

	sleep $WAIT_TIMERS
	sync

	##MPDECISION IDLE FREQUENCY
	echo $SCREEN_OFF_FREQ > /sys/kernel/msm_mpdecision/conf/idle_freq

	sleep $WAIT_TIMERS
	sync
     
	##MPDECISION SCREEN OFF SINGLE CORE
	echo $MPDEC_SCROFF_SINGLE_CORE > /sys/kernel/msm_mpdecision/conf/scroff_single_core

	if [ $MPDEC_SCROFF_SINGLE_CORE -eq 1 ]; then
		echo MPDECISION Single core\: Enabled >> $UBER_LOGFILE;
	else
		echo MPDECISION Single core\: Disabled >> $UBER_LOGFILE;
	fi
     
	sleep $WAIT_TIMERS
	sync

	##MPDECISION TOUCHBOOST
	echo $MPDEC_TOUCHBOOST > /sys/kernel/msm_mpdecision/conf/boost_enabled

	if [ $MPDEC_TOUCHBOOST -eq 1 ]; then
		echo MPDECISION Touchboost\: Enabled >> $UBER_LOGFILE;
	else
		echo MPDECISION Touchboost\: Disabled >> $UBER_LOGFILE;
	fi
     
	sleep $WAIT_TIMERS
	sync
     
	##MPDECISION MAXIMUM CORES
	echo $MPDEC_MAX_CORE > /sys/kernel/msm_mpdecision/conf/max_cpus
	echo MPDECISION maximum CPU cores\: $MPDEC_MAX_CORE >> $UBER_LOGFILE;

	sleep $WAIT_TIMERS
	sync
     
	##MPDECISION HOTPLUG CONTROL
	if [ $MPDEC_HOTPLUG -eq 0 ]; then
		echo 22 > /sys/kernel/msm_mpdecision/conf/nwns_threshold_0
		echo 37 > /sys/kernel/msm_mpdecision/conf/nwns_threshold_2
		echo 47 > /sys/kernel/msm_mpdecision/conf/nwns_threshold_4
		echo 400 > /sys/kernel/msm_mpdecision/conf/twts_threshold_0
		echo 400 > /sys/kernel/msm_mpdecision/conf/twts_threshold_2
		echo 400 > /sys/kernel/msm_mpdecision/conf/twts_threshold_4
		echo Hotplugging of cores\: Slow >> $UBER_LOGFILE;

		sleep $WAIT_TIMERS
		sync
	elif [ $MPDEC_HOTPLUG -eq 1 ]; then
		echo 12 > /sys/kernel/msm_mpdecision/conf/nwns_threshold_0
		echo 25 > /sys/kernel/msm_mpdecision/conf/nwns_threshold_2
		echo 30 > /sys/kernel/msm_mpdecision/conf/nwns_threshold_4
		echo 140 > /sys/kernel/msm_mpdecision/conf/twts_threshold_0
		echo 140 > /sys/kernel/msm_mpdecision/conf/twts_threshold_2
		echo 140 > /sys/kernel/msm_mpdecision/conf/twts_threshold_4
		echo Hotplugging of cores\: Stock >> $UBER_LOGFILE;
		 
		sleep $WAIT_TIMERS
		sync
	elif [ $MPDEC_HOTPLUG -eq 2 ]; then
		echo 10 > /sys/kernel/msm_mpdecision/conf/nwns_threshold_0
		echo 14 > /sys/kernel/msm_mpdecision/conf/nwns_threshold_2
		echo 18 > /sys/kernel/msm_mpdecision/conf/nwns_threshold_4
		echo 100 > /sys/kernel/msm_mpdecision/conf/twts_threshold_0
		echo 100 > /sys/kernel/msm_mpdecision/conf/twts_threshold_2
		echo 100 > /sys/kernel/msm_mpdecision/conf/twts_threshold_4
		echo Hotplugging of cores\: Fast >> $UBER_LOGFILE;
		 
		sleep $WAIT_TIMERS
		sync
	elif [ $MPDEC_HOTPLUG -eq 3 ]; then
		echo $RUNQUEUE0 > /sys/kernel/msm_mpdecision/conf/nwns_threshold_0
		echo $RUNQUEUE2 > /sys/kernel/msm_mpdecision/conf/nwns_threshold_2
		echo $RUNQUEUE4 > /sys/kernel/msm_mpdecision/conf/nwns_threshold_4
		echo $RUNQUEUE6 > /sys/kernel/msm_mpdecision/conf/nwns_threshold_6
		echo $TIME0 > /sys/kernel/msm_mpdecision/conf/twts_threshold_0
		echo $TIME2 > /sys/kernel/msm_mpdecision/conf/twts_threshold_2
		echo $TIME4 > /sys/kernel/msm_mpdecision/conf/twts_threshold_4
		echo $TIME6 > /sys/kernel/msm_mpdecision/conf/twts_threshold_6
		echo Hotplugging of cores\: Custom >> $UBER_LOGFILE;
		 
		sleep $WAIT_TIMERS
		sync
	fi
     
	##MPDECISION UNPLUG CONTROL
	if [ $MPDEC_UNPLUG -eq 0 ]; then
		echo 18 > /sys/kernel/msm_mpdecision/conf/nwns_threshold_3
		echo 22 > /sys/kernel/msm_mpdecision/conf/nwns_threshold_5
		echo 26 > /sys/kernel/msm_mpdecision/conf/nwns_threshold_7
		echo 400 > /sys/kernel/msm_mpdecision/conf/twts_threshold_3
		echo 400 > /sys/kernel/msm_mpdecision/conf/twts_threshold_5
		echo 400 > /sys/kernel/msm_mpdecision/conf/twts_threshold_7
		echo Unplugging of cores\: Slow >> $UBER_LOGFILE;
		 
		sleep $WAIT_TIMERS
		sync
	elif [ $MPDEC_UNPLUG -eq 1 ]; then
		echo 7 > /sys/kernel/msm_mpdecision/conf/nwns_threshold_3
		echo 10 > /sys/kernel/msm_mpdecision/conf/nwns_threshold_5
		echo 18 > /sys/kernel/msm_mpdecision/conf/nwns_threshold_7
		echo 190 > /sys/kernel/msm_mpdecision/conf/twts_threshold_3
		echo 190 > /sys/kernel/msm_mpdecision/conf/twts_threshold_5
		echo 190 > /sys/kernel/msm_mpdecision/conf/twts_threshold_7
		echo Unplugging of cores\: Stock >> $UBER_LOGFILE;
		 
		sleep $WAIT_TIMERS
		sync
	elif [ $MPDEC_UNPLUG -eq 2 ]; then
		echo 34 > /sys/kernel/msm_mpdecision/conf/nwns_threshold_3
		echo 39 > /sys/kernel/msm_mpdecision/conf/nwns_threshold_5
		echo 46 > /sys/kernel/msm_mpdecision/conf/nwns_threshold_7
		echo 100 > /sys/kernel/msm_mpdecision/conf/twts_threshold_3
		echo 100 > /sys/kernel/msm_mpdecision/conf/twts_threshold_5
		echo 100 > /sys/kernel/msm_mpdecision/conf/twts_threshold_7
		echo Unplugging of cores\: Fast >> $UBER_LOGFILE;
		 
		sleep $WAIT_TIMERS
		sync
	elif [ $MPDEC_UNPLUG -eq 3 ]; then
		
		echo $RUNQUEUE1 > /sys/kernel/msm_mpdecision/conf/nwns_threshold_1
		echo $RUNQUEUE3 > /sys/kernel/msm_mpdecision/conf/nwns_threshold_3
		echo $RUNQUEUE5 > /sys/kernel/msm_mpdecision/conf/nwns_threshold_5
		echo $RUNQUEUE7 > /sys/kernel/msm_mpdecision/conf/nwns_threshold_7
		echo $TIME1 > /sys/kernel/msm_mpdecision/conf/twts_threshold_1
		echo $TIME3 > /sys/kernel/msm_mpdecision/conf/twts_threshold_3
		echo $TIME5 > /sys/kernel/msm_mpdecision/conf/twts_threshold_5
		echo $TIME7 > /sys/kernel/msm_mpdecision/conf/twts_threshold_7
		echo Unplugging of cores\: Fast >> $UBER_LOGFILE;
		 
		sleep $WAIT_TIMERS
		sync
	fi

#==ZRAM================================================================================
	if [ $ZRAM -eq 1 ]; then
		swapoff /dev/block/zram0
		echo 1 > /sys/block/zram0/reset
		echo ZRAM\: Enabled >> $UBER_LOGFILE;


		if [ $ZRAM_SIZE -eq 256 ]; then
			echo 268435456 > /sys/block/zram0/disksize
		elif [ $ZRAM_SIZE -eq 512 ]; then
			echo 536870912 > /sys/block/zram0/disksize
		elif [ $ZRAM_SIZE -eq 1024 ]; then
			echo 1073741824 > /sys/block/zram0/disksize
		fi
		 
		mkswap /dev/block/zram0
		swapon /dev/block/zram0
		echo ZRAM Compression\: $ZRAM_SIZE MB ZRAM support enabled >> $UBER_LOGFILE;

		sleep $WAIT_TIMERS
		sync

		echo $ZRAM_COMPRESSION > /sys/block/zram0/comp_algorithm
		echo ZRAM Compression Type\: $ZRAM_COMPRESSION >> $UBER_LOGFILE;

		sleep $WAIT_TIMERS
		sync

	else
		swapoff /dev/block/zram0
		echo 0 > /sys/block/zram0/reset
		echo ZRAM\: Disabled >> $UBER_LOGFILE;
	fi

#==SYSCTL==============================================================================
	#TCP
	echo $TCP > /proc/sys/net/ipv4/tcp_congestion_control	

	sleep $WAIT_TIMERS
	sync
	
	##SWAPPINESS
	echo $SWAPPINESS > /proc/sys/vm/swappiness
	echo Swappiness\: $SWAPPINESS >> $UBER_LOGFILE;
	 
	sleep $WAIT_TIMERS
	sync

	##DROP CACHES
	echo $DROP_CACHES > /proc/sys/vm/drop_caches
	echo Drop Caches\: $DROP_CACHES >> $UBER_LOGFILE;

	sleep $WAIT_TIMERS
	sync

	##FS DELAY WRITEBACKS MODE
	echo $FS_DELAY > /proc/sys/vm/laptop_mode

	if [ $FS_DELAY -eq 1 ]; then
		echo FS DELAY WRITEBACKS\: Enabled >> $UBER_LOGFILE;
	else
		echo FS DELAY WRITEBACKS\: Disabled >> $UBER_LOGFILE;
	fi

	sleep $WAIT_TIMERS
	sync

	##DIRTY RATIOS
	echo $DIRTY_RATIO > /proc/sys/vm/dirty_ratio
	echo Dirty Ratio\: $DIRTY_RATIO >> $UBER_LOGFILE;
		

	sleep $WAIT_TIMERS
	sync

	echo $DIRTY_BACKGROUND_RATIO > /proc/sys/vm/dirty_background_ratio
	echo Dirty Background Ratio\: $DIRTY_BACKGROUND_RATIO >> $UBER_LOGFILE;

	sleep $WAIT_TIMERS
	sync

	##POWER SUSPEND
	echo $POWER_SUSPEND > /sys/kernel/power_suspend/power_suspend_mode
	 
	sleep $WAIT_TIMERS
	sync
	 
	if [ $POWER_SUSPEND -eq 0 ]; then
		echo Power Suspend Mode\: AUTOSLEEP >> $UBER_LOGFILE;
	elif [ $POWER_SUSPEND -eq 1 ]; then
		echo Power Suspend Mode\: USERSPACE >> $UBER_LOGFILE;
		echo 1 > /sys/kernel/power_suspend/power_suspend_state
	elif [ $POWER_SUSPEND -eq 2 ]; then
		echo Power Suspend Mode\: LCD_PANEL >> $UBER_LOGFILE;
	else [ $POWER_SUSPEND -eq 3 ]; then
		echo Power Suspend Mode\: HYBRID >> $UBER_LOGFILE;
	fi
	
	sleep $WAIT_TIMERS
	sync

#======================================================================================
else
	echo UBER PRESETS\: Disabled >> $UBER_LOGFILE;
fi

exit 0
